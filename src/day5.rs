/// The characters traversed in the the row_str are only 'F' or 'B'. F means the first half and
fn get_row_recursive(
    row_str: &[char],
    row_idx: usize,
    start: usize,
    end: usize,
    lower_marker: &char,
    upper_marker: &char,
) -> usize {
    if end == start {
        return start;
    }
    let ch = row_str[row_idx];
    let half_mark = start + (end - start) / 2;

    let (new_start, new_end) = if ch == *lower_marker {
        (start, half_mark)
    } else if ch == *upper_marker {
        (half_mark + 1, end)
    } else {
        panic!("{} or {} expected but found: {}", lower_marker, upper_marker, ch);
    };
    return get_row_recursive(
        row_str,
        row_idx + 1,
        new_start,
        new_end,
        lower_marker,
        upper_marker,
    );
}

fn get_row(row_str: &[char]) -> usize {
    get_row_recursive(row_str, 0, 0, 127, &'F', &'B')
}

fn get_col(col_str: &[char]) -> usize {
    get_row_recursive(col_str, 0, 0, 7, &'L', &'R')
}

fn find_missing_seat(seats: &Vec<usize>) -> usize {
    let new_zero = seats[0];
    for (i, seat) in seats.iter().enumerate() {
        if i + new_zero != *seat {
            return i + new_zero;
        }
    }
    0
}

fn part1(boarding_passes: &[&str]) -> usize {
    let mut max_seat_no = 0;
    let mut seats = vec![];

    for boarding_pass in boarding_passes {
        let chars: Vec<char> = boarding_pass.chars().collect();
        let seat_no = get_row(&chars[0..7]) * 8 + get_col(&chars[7..]);
        if max_seat_no < seat_no {
            max_seat_no = seat_no;
        }

        seats.push(seat_no);
    }
    seats.sort();
    println!("Missing seat: {}", find_missing_seat(&seats));
    //println!("seats: {:?}", seats);
    max_seat_no
}
#[cfg(test)]
mod tests {
    #[test]
    fn t1() {
        let passes = ["FBFBBFFRLR", "BFFFBBFRRR", "FFFBBBFRRR", "BBFFBBFRLL"];
        assert_eq!(super::part1(&passes), 820);
    }

    fn to_chars(s: &str) -> Vec<char> {
        s.chars().collect::<Vec<_>>()
    }

    #[test]
    fn rows() {
      assert_eq!(super::get_row(&to_chars("FBFBBFFRLR")[0..7]), 44);
      assert_eq!(super::get_row(&to_chars("BFFFBBFRRR")[0..7]), 70);
      assert_eq!(super::get_row(&to_chars("FFFBBBFRRR")[0..7]), 14);
      assert_eq!(super::get_row(&to_chars("BBFFBBFRLL")[0..7]), 102);
    }

    #[test]
    fn cols() {
      assert_eq!(super::get_col(&to_chars("FBFBBFFRLR")[7..]), 5);
      assert_eq!(super::get_col(&to_chars("BFFFBBFRRR")[7..]), 7);
      assert_eq!(super::get_col(&to_chars("FFFBBBFRRR")[7..]), 7);
      assert_eq!(super::get_col(&to_chars("BBFFBBFRLL")[7..]), 4);
    }

    #[test]
    fn part1() {
        let x: Vec<_>  = PASSES.split("\n").collect();
        assert_eq!(super::part1(&x), 935);
    }

    const PASSES: &str = 
"BFFFFFFLLR
FBBFFFFLRL
BFFFBFFLRL
BBBFBFFLLL
FBBBFFFRLR
FFBFBFFLLR
FBFBFBBLLR
BFBBFFFRLL
FFFBFBBLRR
BFFBBBBLRR
FFBFBFBRRL
BBFBBFFRLR
BFBFBBFLRR
BFFFBFFLLL
FBBBFFFRRL
BFFBFBBLRL
BFBFBFFRRR
FFBFBFBRLL
FFFBBFBLLL
BBFFBBBRLL
FBFBBBFLRR
FBFFFBFRRR
FBFBBBBRLL
BBBFFFFRRL
FBFBFFBRLL
BFBFBBFLLR
BBFBFFBRRR
FFFBBBFRRR
FFBBFFBLLL
BFBBBBBRLR
BFBBFFFLLL
BFFFFBFRRL
FFFBBBFLLR
BBFFBFBRRR
BBFFFBFLRL
BBFFBFBLLL
FFBFBBFLLL
BBBFFBFLRR
BBFBFFFRLR
FBFBBBBRRR
BFBBBBBLLL
BBBFFBBLLL
BBFBFBFRRL
BBFFFBFRRL
BBFFFBBRRR
BBBFBFFLLR
FFBBFFBLRL
BFBBBBFRRL
FFBBBBBLLL
FBBFBBBLRL
BBFFFFBRLL
FBFFBBBLRR
FBBFFBFLRL
FFFBFFBRRR
FFFBFBBRLL
FFBFFBBLLR
FFFBBFBRRR
BBFBBFFLRR
FBBBBFBRRL
BFBBFBFRRL
FBBBBBBLRL
BFBBFBFRLR
FBBFFBBRLR
FBBFBFFLRL
FBBBBFFLLR
BBBFFBBRLL
BFFBFBBRLL
BFFFBFBRLL
BFBBFBFLRL
BFBBBBFLRR
BBFBFBBLRL
FFBFBBFRLR
BFBFFFBRRR
BFFBFFBLLL
FBFFFFFRLR
FFBBFFFLLR
BFFBFFFRRR
FFFBBFBLRL
BFFBBFBRLR
BBFBFBBLLR
FFFBFBFLLR
FFBBFFFLRR
FBBBBBFLLL
FFBBBFBLLR
FBFBFBFRRR
BFBFFBBLRR
FFBFFBBLRR
BBFFBFFRLL
FFFBFBFRLL
FBBBBBBRRR
BBBFFFFRLL
FBFBBFFRLR
FFBBBBFRRL
BFBFBBFLLL
BBFBBFBLRR
BFBBBBBRRL
FBBFBBBRLL
FFBFFFFRLR
FBFFBFFLLL
FBFFBFFRRL
BFFFFBBRLR
BFFBBBFRRR
BBFBFFBRRL
BFBBFBFLLR
BBBFFBBRRR
BFBBFFFRRR
FBBBFFFLLR
FBBBBBBLLR
BFBBBBFRLR
FBBBFBBRLL
BBBFFBBRLR
BBFFBBFRRR
BBBFFFBRLL
FFFBBBBRRL
BFFFFBBRRL
FFBBFBFRRL
BFFFFBFLRL
FBBBBFBRLL
BFFBBBBRRL
BFFBBBBRLR
FBBFFBBLRR
BFBBFFBLLR
BFBBFBFRRR
FBFBFFFLRL
BBFFFFBRRL
FBFFBFFRLR
BBFFFFFLLR
FBFFBBBRRL
FBBFBFFLLR
FBBFFFFRLR
FBBBBFBRLR
FBFFBFFRLL
BFBFFBFRLR
BBFBFBBLRR
FBBFBFBLLR
FFBFFBFRRL
BFFBBBFRLR
FBFBFBBLRR
FBFFBBBLLR
FBFFBFBRRL
FBBFBFFRLR
FBBBFBBRRL
FFFBFFBRRL
BBFFBFFLRL
FBBFBBFRLR
BFFFFFBRLL
FBBFFFFLRR
FBBBBFFLLL
BFBFBFFRLR
BFFFFFBLRL
FFBFBBFRLL
BFBBFBBRRR
FBFFBBFLLR
BBFFBFBLRL
FFFBFFBLLL
BFBFFFFRLL
BBFBFBFRLR
FBBFBBFRRL
BFBFFBBRLL
FBFFFFBRLR
BBFFFFFRRL
BFFBBBBLLL
FFBBBBFLRL
FBFFBFBRLR
FBBFBFFLLL
FBBFBBFLRR
FFBBFBFRLR
FFBBFBBLRR
BFFBBFFLRR
FFFBBBBLRL
BFFFFFFRRR
FBFFFFBLRR
FBFBBFBRLR
BBFBFFFRRL
FBBFBFBLRL
BFFBFFBRRL
BFFFBFBLRL
FBBBFBFLLL
BFFFBFFRRL
BFFFBBBLRR
FFFBFBFLLL
BBFFBFBRLL
BBBFFFFRRR
BFFFFBBRLL
BBFBFFBLRL
FBFFFBBLLL
FFBBBFBLRL
BBFBBFBRLL
FFFBBFBRRL
BFFBFBFLRR
BBFBFFBLRR
BBFBBBBRLR
BFBBFFBLRR
FBBBFBBRLR
BBFFFBFLLR
FBFFBBFRLR
BFBBFBBRLL
BFBBFFBRLL
FFBBBBBRLL
BBFFFFBLLR
FBFFFBBRRL
BFBFFFBLRL
FBBBFFBLLR
BBFBFBBRLR
FBFBFFFRRL
BBFBFFFRLL
BBFBFFFLRR
BFBBFFFLRL
FBFBFFFRRR
BFBBBFBLRR
FBBFFFFRRR
BFBFBBBLLL
BFFFFFBRRL
BBFFFFBLLL
FBFFFFFLLR
BFBBBFBRLL
FBBFBBFLRL
FFFBFFFRLL
BBFBBFBLRL
BFFFFBFLLR
FBBBBFBLRR
BFBFFFBLRR
FFFBBFFRRL
BFBFBBFRRR
FBFFBBBLLL
FBFBFFBRRR
BBFFFFBRLR
BFFBFFFLLR
BFBBFFBRLR
FFBBFFFLLL
FBBFBFFRRR
FBFFBFBLLL
BFFFFFFRRL
FFFBFBBLRL
BFBFFBBLLL
FBBFBFBRRR
FBBBBBFLRR
FBFBFBFLRR
BBBFBFFLRL
FBBBFBFLRR
BBFBBBFRLR
BBFFBBBLRR
FFBFBFFRRL
BBBFFFBLLR
BFBBFBFLRR
FFBFFFBRRR
FBFBBBBRLR
FBBFFBFLLL
FBBFBBFRLL
FFFBBFBLRR
FFBBFFBRLR
FBFBBBFLLR
FBFBFBBRRL
BFFBBFBLLL
BFBFBFBLRL
FFBFBFBLRR
FBFFBBFRLL
FFBBFBBLRL
BFBBFBBLRR
BBFFBFFRRL
FBBFFBFRLR
BFBFBFBLLL
FBFFFFBLLL
FBFBBFBRRR
FFFBFFBRLR
BBFFBFFLRR
BBFBBFBLLR
BFFFFFBLLL
FBBFBFBLLL
FFBFBBFRRR
BBFBFFFLLL
FFBFBBFLRL
FFFBFFBLRL
BFFBFFBRLL
FFFBFFBLRR
FFBBFFBRRR
BFBFBBBRRR
BFBFBFFLLL
FBFBBFFRLL
FFBFFBFLRL
FBBFFFBLRR
BFBBFBBLRL
FBFBBFBLRR
FFBFBFFLLL
FFFBBBFLLL
BFBBFFFLLR
BBFBFBFLLR
FBFFBFBLLR
BFBBBBFRRR
FBBBBBFRLL
BBFBFBBRRR
FBBFFBBRRR
FFFBBBBLLR
BFFFFFBRRR
BFFFFFBLLR
BFFFBFBLLR
BBFFFFFLLL
BFBFFBBLRL
BFFBBBFRLL
FBFBBFBRLL
FFFBBFFLLL
FBBFFBBRLL
BBFFFBBRLL
FBBBBFBLLR
FBBBBBBLRR
BFFBBFFLLL
BFFBBBFLLR
BBFFBFBRLR
BFFBFBFLRL
FFBBFFBLLR
BFFFBFFRRR
FFBBFFFRLR
BFFFFBFLLL
BBFFBFFRRR
BBBFFFBLRL
BFFBBBFRRL
FFBFFFFRLL
BBBFFFFLLL
BBFFBBBRRL
FFFBFFFRRL
FBFBBBFLLL
BFFFBFBRLR
FBBFFBFLLR
BBFFBFBRRL
FBFFFBFLRR
FFBBFBFRRR
BBFBBBFLLL
BBFBBFBRRR
BFBFFFFLRL
FBBBFBBLLL
FFBFBFFRLL
FBFFBBFLRL
BBFFBBFRLR
BFFFBBBRRR
FBFBBBFRRR
FFBBFBBRLR
FFBFBBBRLL
BFBBFBFLLL
FBFFBFFLRR
BFBFBBFRRL
BFFBBBFLRL
BFBFFBBLLR
BBBFFFBRRR
BFFFBBFLLR
FBBBBBFLLR
FBFBFBFLRL
FFBBFFFRRL
BFBFFBFLRR
FBFBFFFLLR
BFFFFFBRLR
BFBFFBBRLR
BFBFFFBRLR
FBBFBFBRLL
FFBFFFBLRL
FBFFFFBRRL
BBBFFBBLLR
BBFFFBBLLR
FFBFFBFLLR
FBFFFFBLLR
FBFBFBBLRL
FFBBBFFRRL
FFBFFFFLLL
FBFFFFBRRR
BFBBBFBRLR
FBBFBBFRRR
FBBFBFBLRR
BFBFBFBLRR
BBBFFFBLLL
FFBFBFBLLL
FFFBBFBLLR
BFBFBFFLRL
FFFBBBBRRR
BBFBFBBLLL
FBBFFFBRRR
BFBBFBBRLR
BFFBBBBLRL
BFBBBBFLLL
BFBFFBFRRR
BFFFBFFLRR
BFBBFFBRRR
BFFFBBFRRL
BFFFBBFRLR
FBBFFBBLLL
BBFBBFBLLL
BBBFFBFLRL
BFBBBFBRRL
BBFBBBFRLL
FBFBFFBRRL
BFBBFBBLLR
BFFBBFBLLR
FBBBFBFRLR
FBBFFFBRLR
BBFBFFBLLL
FBBBBBFLRL
BBFFFBFLRR
FFFBFBBLLR
BBFBBBFLRR
FFFBBBBRLL
FBBBFFFRLL
FFBFBFFRLR
FBBBFBBLLR
BBBFFBFRRR
BFFBFBFRLR
FBBBBBBLLL
FFBFBBBRRR
FFBBFFBRLL
BBBFBFFRRL
BFFFBFFRLR
BFFFBFFRLL
BFBBBFBLLL
FBFBBBBLRR
FBBFBBFLLL
FBBFFBBRRL
BBFBFBFLLL
FBBBFFBRLL
FBBFBFBRRL
BFFFFFFRLR
BBFBFBFLRL
FFBBBFFRLR
FFFBBBFRRL
FBFFFBBRLL
FBBFFBBLLR
BFBFFFFLRR
FFBFBBBLRL
FFBBBFBRRR
BBFBFFBRLR
FBBBBBFRRL
FBFBBFBLLR
BFBFBBFLRL
BFBBBBBRRR
BFBBBBFLLR
FBBFBFFRLL
FFBBBFFRRR
FBFFFBFLLR
BBFFFBFLLL
FBFFFFFLLL
BFFBFBBLLL
FFBBFFBRRL
BBFBFFBRLL
BBFBBFBRLR
FFFBFBFRLR
BFFBBBBRLL
FBFFBBFLLL
BBFFFBFRLL
FBFFBBFLRR
BFBFFBFRRL
BFFBBFBRRR
FBFBBFFLRL
FFFBBBBLRR
FFBBBFFLLR
FBFFFBFLLL
FBFBFBBRLL
FBFFFBFLRL
BBFBBBBLRR
FFBFFFBLLR
BFFFFBFRRR
FBFFFBBRLR
FFBBBFBRRL
BFFFFBFLRR
FBBFFBFRLL
BBFBFBFRRR
FBFFFFBRLL
FFBBFFFLRL
FBFFFFFRRR
BFFFBBFLRL
FFBBFBFRLL
FBBBBFFRRR
FBFBBBBLLR
FFBBBFBLRR
FBFFFFFRRL
BFBFFFFLLL
BBFBFBBRLL
FBBBBFFRRL
FFBFFBFRLR
FFBBFBBRRR
BBFBBBBRRR
BFFBFFFRLL
BFFFFFFLRR
BBFFBBFLRL
FFBBFFFRRR
BBFBFBFLRR
FFBFFFFRRL
FBFBBFFLLR
FBBBFFBRLR
FBFBBBFLRL
BFBFBFFLLR
FFFBFFFLLR
FBFFBFBRRR
BFBBBBBLRR
BFFBBBBLLR
BBFFFFFRLR
BFFFFBBLRR
BFFBBFFRRR
BBFBBBBRRL
BFBFFFFRRL
FFBFBBBRRL
FBFFFBFRLL
FFBFFBBRRR
FBBBFBBLRL
FFFBFFFRRR
FBFBFFBRLR
FBFBFFFLRR
FBFFBFFRRR
FFFBFBFRRR
FFBBBBBRRL
BFBBBBFRLL
FFFBFBBLLL
BBBFFFBRRL
FFBFBBFLRR
FBBBFFFLRR
BFFBBFBLRL
FFBFBBBLLL
FBFBBBFRLL
FFBFFFFLLR
FFBFBFFRRR
FBBFBBBLLR
BFBFBFBRLR
BFBBFFFRRL
FBFBBFBLLL
BFFFBBBLLR
BFFBFFBLLR
FBBBBBFRLR
FBBBFFBRRL
BFBFBBBLRR
BFFFBBBRLR
FBFBFBBRRR
FBFBFFFRLR
FBBFFFFLLR
FFBFBBBRLR
BBFBBBBRLL
FBBBFFFLRL
FFBFBFBLRL
BBFFBBFRLL
FFBFFFBLRR
BFFBFFFLRR
FBFFFBBLRL
BFBFFFBRLL
BFBFFFBLLR
FFFBBBFLRR
FFBBBFBLLL
FFBBBBBLRR
FBBBBFFRLL
FBFFFFFLRL
FBBBBFFRLR
FFFBBFFLLR
BBFFFFFRLL
FFBFFBBRLR
FFFBFBFRRL
BBFBBBFLLR
BFBFFFFRRR
BFFBFFFRLR
FFBBFFFRLL
FBFBFBBRLR
FFBFBBBLRR
BFBFBBBRLR
FFBFBBBLLR
FFBFBFBRRR
FBBBFFBLRR
FBFBBBFRLR
FBBBBBBRRL
FFBFFFBRLL
BFBFFBFRLL
FFBBBBBLRL
FBBBBFBRRR
BFFBFBFRLL
BBBFFFBLRR
FBBFFFBRRL
BFBBBBBRLL
BBFFBFFLLR
FBFFBBBRLL
FBBBFBFRRL
BFFFBBBRLL
FBBBFBFRLL
BBFFFFBRRR
FBBBFBFLLR
FBBBBBFRRR
FFBFFBFLRR
FFBBFBFLLL
BFFFBBFLLL
BFBFFFBRRL
FFBFFBBRLL
BFBBBBBLRL
BFBFFBFLLR
FBFBFBFRLL
BFFBBFFLRL
BBFFFFBLRR
BFBFFFFRLR
BBFBBFFRLL
BFBBBFFRRL
BBFFBBBRRR
BBBFFBBLRL
FBBBFFBLLL
BFFFFBBRRR
FBFBFFBLRL
FBBFFFBLLR
FFBFFBFRLL
BFFFFFFLRL
BBFFFBBLLL
BBFFFBBLRR
BBBFFBFRLL
FBFBFFFRLL
FBBBFFFLLL
BBFFFBBLRL
FBBBFFBLRL
FFBFFBBLRL
FFBBBFFLRR
BBFBBFFLRL
BFFFBBBLLL
BBFBBBBLLL
FFBFFFFLRR
BFBFBBBRLL
FFBBFBBRLL
FFBBFFBLRR
FBFBBBBLLL
BFBBFBBRRL
BFFBFFBRLR
BFFFFBFRLL
BBFBFFFRRR
FFBBFBBLLR
FFBFBFFLRL
BBFBBFFRRR
FFFBBBFRLL
FFBFBFBLLR
FFBBBFBRLR
BFBFBFBLLR
FFFBBBBLLL
FBBBFFFRRR
FBFFFBFRLR
BFFFFBBLRL
FFFBFFFRLR
BFBFFBFLRL
BBBFBFFRLL
BFFBFFFLRL
BFFBFFBRRR
FFBBBBFLRR
BBFBFFFLRL
FBFBBFFLRR
FBFFBFBLRL
BFFFBBFLRR
FBFBBFFRRR
FBFBBFFLLL
BBFFBBFLRR
BBBFFBFLLL
BFFBBBFLRR
FFBBBBFRLR
FBFFFBBRRR
FBFFBBBRLR
FFFBBFFLRL
FBFBBBBRRL
FBBBBFFLRR
FBBBFBBLRR
BFFBBFBRRL
BFBBFFBRRL
BFBFFBBRRR
BFBFFFFLLR
BBFBBBBLRL
FFBBFBFLRL
FBFFFBBLRR
BFFBFBFRRL
BFFFFBBLLL
FBBFBBBRLR
FFBFFFBRRL
BFFFFFFLLL
BFFFFFBLRR
FFBBBFFLRL
FBBBFBFRRR
BFBBFBBLLL
BBFFBBBLLL
BFBBFFFRLR
BBFBFFFLLR
FFBFFFBLLL
BFBBBFBRRR
BBFBBFFLLR
FFBFBFBRLR
FFFBFBBRRL
BFFFBBBRRL
FBBFFFFRLL
FFBFFBBLLL
BFBBBFFLLR
BBBFFBFLLR
FBBFFBFRRR
FFBFBBFLLR
BFFBBFFLLR
BFFBFBBLRR
FBBFBBBRRL
FBBFBBBLRR
FBFFBBBRRR
FBBFFFBRLL
BFFBBFFRLL
FFBBFBFLRR
FBFFFFBLRL
FBFFBBFRRR
BFFBBFFRRL
BBBFFBBLRR
BFFFBBBLRL
FFBBFBFLLR
BFFBFBBRLR
FBFFBFBRLL
FFFBBBFLRL
FFBBBBBLLR
BFBFBBFRLR
FBFBFFBLRR
FFFFBBBRRR
BBFFBFBLLR
BFFFBFBRRR
BFFFBFBRRL
BBFFFBBRLR
FFBBBFFLLL
FBBBBFBLRL
BFBFFFBLLL
FFFBFBFLRR
FBBFBFFLRR
FBBFFFBLLL
BFFBBFBRLL
FBFFBFFLLR
BFFFFFFRLL
FFFBBFFRRR
FFFBBFBRLL
FBFBFBFLLL
BFBFBFBRRL
FBFFBFBLRR
FFFBBBBRLR
BFFFBBFRLL
FBBBFFBRRR
BFBBBFFLRR
BFBBBFFRLR
BFBFBFFRRL
FBBFBFFRRL
BFFFBFFLLR
FFBFFBFRRR
BFBFBBBLLR
BBFBBBFLRL
BBFFFFBLRL
BFFBBFFRLR
BBBFFBFRLR
BFFBBBFLLL
BBFFBBBRLR
BBFBBBFRRL
BBFFFFFRRR
BBFFBBFLLL
FFFBBFFRLR
BFFBFFBLRR
BBFFBFBLRR
BBBFFFFLLR
FBBBFBFLRL
FBBFBBBLLL
BFFFBFBLRR
FBBBBFBLLL
FFFBFBBRRR
BFFBFBFLLL
BFBFBFBRRR
FFBFFFFLRL
FBBBFBBRRR
FFBBBBFRLL
BBFBBBBLLR
BFBBFFBLLL
BFBFBBBLRL
BBBFBFFRRR
FBBFFFBLRL
FBFFBBFRRL
FFFBFBBRLR
FBFBBFFRRL
FBFBBFBLRL
BBFBBFFLLL
BFFBFBBRRL
FBFBBBBLRL
FFFBFBFLRL
BFFBFFFLLL
FFBBBBFLLR
FFBBBBFLLL
FBFBFFFLLL
FFBFBBFRRL
BBBFBFFLRR
BFFBBBBRRR
FFBBBFBRLL
FFFBBFFLRR
BBFFBFFLLL
BBBFFBFRRL
FBBFBFBRLR
FBBFBBFLLR
FBBFBBBRRR
FBFBBFBRRL
BFFFFBFRLR
FBBFFFFLLL
BBFBBFBRRL
BFBFFBFLLL
FBBBBBBRLR
FBFFFBFRRL
BBFFFBBRRL
FFBBBBBRLR
FFFBBBFRLR
BBFBFFBLLR
BFFBFBFRRR
BFFFBFBLLL
FBFFFBBLLR
FFBFBFFLRR
FFFBFFFLLL
BBFFFBFRLR
BBBFFBBRRL
FFBBFBBLLL
BFFBFFBLRL
FBFBFBFRLR
BFFBFBFLLR
FBBBBBBRLL
BBFBFBBRRL
BBBFFFFLRR
FBFBFFBLLR
BFBFBFFRLL
FFBBBBBRRR
BFBBBFFLRL
BFFFFBBLLR
BFBBBFBLRL
BFBBBFFRLL
BBFBBFFRRL
BFBFBFFLRR
BFBBBBFLRL
FBBBBFFLRL
BBFBBBFRRR
FFBBBFFRLL
FFFBFFFLRL
BFBBFFFLRR
FBFFBFFLRL
BFBBFBFRLL
FFBFFBFLLL
FBFFFFFRLL
BFFBBFBLRR
FBFFFFFLRR
FBFBFBFRRL
BBBFBFFRLR
FBFBFFBLLL
BBFFFFFLRL
BFBFBBBRRL
FBBFFBFLRR
BBBFFFFLRL
BFBBBBBLLR
BBFFFFFLRR
FFFBBFFRLL
BFBFBBFRLL
BFBBBFFLLL
BBFFBBBLRL
BBFBFBFRLL
FFBFFBBRRL
FBFBFBBLLL
BBFFBBBLLR
FFBBFBBRRL
FFFBFFBRLL
BFBFFBBRRL
BBBFFFBRLR
BFBBFFBLRL
FFFBFFBLLR
BFFBFBBLLR
FBFBFBFLLR
BFFBFFFRRL
FBBFFBBLRL
BBFFFBFRRR
FFBFFFFRRR
BFFBFBBRRR
FBFFBBBLRL
BFFFBBFRRR
BBBFFFFRLR
BFBFBFBRLL
FBBFFFFRRL
BBFFBBFRRL
BFBBBFBLLR
FFBFFFBRLR
FFFBBFBRLR
FBFBBBFRRL
BBFFBBFLLR
BBFFBFFRLR
FBBFFBFRRL
FFFBFFFLRR
FFBBBBFRRR";
}
